{
    "version": 3,
    "sources": [
        "../../../src/admin/model/dict.js"
    ],
    "names": [
        "loadDictTable",
        "gid",
        "offset",
        "limit",
        "order",
        "param",
        "str_obj",
        "delstatus",
        "think",
        "isEmpty",
        "name",
        "model",
        "where",
        "select",
        "data",
        "count",
        "total",
        "rows",
        "updateStatus",
        "id",
        "status",
        "update",
        "addDict",
        "dict",
        "bret",
        "thenAdd",
        "code",
        "result",
        "type",
        "delDict",
        "findDict",
        "find",
        "updateDict",
        "upBret",
        "getDictByGroupCode",
        "groupCode",
        "sql",
        "tablePrefix",
        "query",
        "base"
    ],
    "mappings": "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",
    "file": "../../../src/admin/model/dict.js",
    "sourcesContent": [
        "// +----------------------------------------------------------------------\r\n// | ThinkJS-RABC [ 通用权限管理系统 ]\r\n// +----------------------------------------------------------------------\r\n// | Nanjing Digital Technology Co., Ltd.\r\n// +----------------------------------------------------------------------\r\n// | Copyright (c) 2017 http://www.51-health.com All rights reserved.\r\n// +----------------------------------------------------------------------\r\n// | Author: Devlin <Devlinheart@qq.com>\r\n// +----------------------------------------------------------------------\r\n// | Create: 2017-06-20\r\n// +----------------------------------------------------------------------\r\n\r\n'use strict';\r\n/**\r\n * model\r\n */\r\nexport default class extends think.model.base {\r\n     /**\r\n     * 加载字典组表格\r\n     * @param {*} pid \r\n     * @param {*} offset \r\n     * @param {*} limit \r\n     * @param {*} order \r\n     * @param {*} param \r\n     */\r\n    async loadDictTable(gid,offset,limit,order,param){\r\n        let str_obj = {delstatus:1};\r\n        if(!think.isEmpty(gid)&&gid!=0){\r\n            str_obj.gid = gid;\r\n        }\r\n        if(!think.isEmpty(param)){\r\n            str_obj.name = param;\r\n        }\r\n        let data = await this.model(\"setup\").where(str_obj).order( order+\" desc\").limit(offset,limit).select();\r\n        let count = await this.model(\"setup\").where(str_obj).count();\r\n        return {total:count,rows:data};\r\n    }\r\n    /**\r\n     * 更新状态\r\n     * @param {*} id \r\n     * @param {*} status \r\n     */\r\n    async updateStatus(id,status){\r\n        return await this.model(\"setup\").where({id:id}).update({status:status});\r\n    }\r\n    /**\r\n     * 添加字典\r\n     * @param {*} dict \r\n     */\r\n    async addDict(dict){\r\n        let bret = {\r\n            status:0\r\n        }\r\n        let result = await this.model(\"setup\").thenAdd(dict,{code:dict.code,delstatus:1});\r\n        if(!think.isEmpty(result)){\r\n            if(result.type=='exist'){\r\n                bret.status = 2;\r\n            }\r\n            else{\r\n                bret.status = 1;\r\n            }\r\n        }\r\n        return bret;\r\n    }\r\n    /**\r\n     * 删除字典\r\n     * @param {*} id \r\n     */\r\n    async delDict(id){\r\n        //逻辑删除\r\n        return await this.model(\"setup\").where({id:id}).update({delstatus:0});\r\n    }\r\n    /**\r\n     * 查找字典\r\n     * @param {*} id 字典主键\r\n     */\r\n    async findDict(id){\r\n        return await this.model(\"setup\").where({id:id}).find();\r\n    }\r\n    /**\r\n     * 更新字典\r\n     * @param {*} dict \r\n     */\r\n    async updateDict(dict){\r\n        let result = await this.model(\"setup\").where({code:dict.code,delstatus:1}).find();\r\n        let bret ={status:1};\r\n        if(think.isEmpty(result)){\r\n            bret.status = -2;\r\n        }\r\n        else{\r\n            let upBret = await this.model(\"setup\").where({id:dict.id}).update(dict);\r\n            if(think.isEmpty(upBret)){\r\n                bret.status = -1;\r\n            }\r\n        }\r\n        return bret;\r\n    }\r\n    /**\r\n     * 根据组编号获取字典值\r\n     * @param {*} groupCode \r\n     */\r\n    async getDictByGroupCode(groupCode){\r\n        let sql = \"select * from \"+this.tablePrefix+\"setup where gid=( select id from \"+this.tablePrefix+\"setup_group where code='\"+groupCode+\"') and status = 1 and delStatus=1\";\r\n        return await this.model(\"setup\").query(sql);\r\n    }\r\n}"
    ]
}